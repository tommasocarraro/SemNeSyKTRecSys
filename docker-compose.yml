services:
  neo4j-import:
    build:
      dockerfile: Neo4jImport.Dockerfile
    volumes:
      - ./neo4j/logs:/logs
      - ./neo4j/data:/data
      - ./data/wikidata:/import
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/your_password
      - NEO4J_server_memory_heap_initial__size=31G
      - NEO4J_server_memory_heap_max__size=31G
      - NEO4J_server_memory_pagecache_size=154400M
      - NEO4J_server_jvm_additional='-XX:+ExitOnOutOfMemoryError'

  neo4j:
    image: neo4j:5.26.1-enterprise
    volumes:
      - ./neo4j/logs:/logs
      - ./neo4j/data:/data
      - ./data/wikidata:/import
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=neo4j/your_password
      - NEO4J_server_memory_heap_initial__size=31G
      - NEO4J_server_memory_heap_max__size=31G
      - NEO4J_server_memory_pagecache_size=154400M
      - NEO4J_server_jvm_additional='-XX:+ExitOnOutOfMemoryError'
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    ports:
      - "7687:7687"
    depends_on:
      neo4j-import:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "your_password", "RETURN 1;" ]
      interval: 10s
      retries: 9999999999999
      start_period: 20s
      timeout: 20s

  python-app:
    build:
     dockerfile: PythonApp.Dockerfile
    depends_on:
      neo4j:
        condition: service_healthy
    volumes:
     - ./data/wikidata:/import
    environment:
     - EXPORT_PATH=/import
     - NEO4J_DATABASE=wikidata
     - NEO4J_URI=bolt://neo4j:7687
     - NEO4J_USER=neo4j
     - NEO4J_PASS=your_password
